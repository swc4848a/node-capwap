diff --git a/capwap/enum.js b/capwap/enum.js
index 3e84eb9..efee784 100755
--- a/capwap/enum.js
+++ b/capwap/enum.js
@@ -11,7 +11,7 @@ exports.timer = {
 };
 
 exports.socket = {
-	SERVER_PORT: 15246,
+	SERVER_PORT: 15246, // should be 5246 => debug use only
 	SERVER_IP: 'localhost',
 	CLIENT_PORT: 10002,
 	CLIENT_IP: 'localhost',
diff --git a/client/client.js b/client/client.js
index a71f476..2f58523 100755
--- a/client/client.js
+++ b/client/client.js
@@ -3,11 +3,7 @@ var client = dgram.createSocket('udp4');
 var decoder = require('../capwap/decoder');
 var util = require('util');
 var state = require('./state');
-
-var context = {
-	discoveryCount: 0,
-	discoveryTimer: 0
-};
+var context = require('./context');
 
 client.on('listening', function() {
 	var address = client.address();
diff --git a/client/session.js b/client/session.js
index 94787b8..c5ac4a2 100755
--- a/client/session.js
+++ b/client/session.js
@@ -54,7 +54,7 @@ exports.create = function(client, context) {
 		},
 		controlHeader: {
 			messageType: 1,
-			sequneceNumber: 0x9e,
+			sequneceNumber: context.sequneceNumber,
 			messageElementLength: elementLength,
 			flags: 0
 		},
@@ -67,4 +67,31 @@ exports.create = function(client, context) {
 	context.discoveryCount++;
 	scheduleWaitDiscoveryResponse(context);
 	console.log('send Discover Request');
+}
+
+exports.startJoin = function(client) {
+	var elementLength;
+	var joinRequest = encoder.encode({
+		preamble: {
+			version: 0,
+			type: 0
+		},
+		header: {
+			headerLength: 2,
+			radioId: 1,
+			wirelessBindId: 1,
+			headerFlags: 0,
+			fragmentId: 0,
+			fragmentOffset: 0,
+			reserved: 0
+		},
+		controlHeader: {
+			messageType: 3,
+			sequneceNumber: context.sequneceNumber++,
+			messageElementLength: elementLength,
+			flags: 0
+		},
+	});
+	client.send(joinRequest, 0, joinRequest.length, enumType.socket.SERVER_PORT, enumType.socket.SERVER_IP);
+	console.log('send Join Request');
 }
\ No newline at end of file
diff --git a/client/state.js b/client/state.js
index 9492b56..252dc7c 100755
--- a/client/state.js
+++ b/client/state.js
@@ -12,13 +12,12 @@ var state = Stately.machine({
 		'DISCOVERY_RESP_RECV': function(context) {
 			clearTimeout(context.discoveryTimer);
 			// console.log(util.inspect(response, false, null));
-			return this.END;
+			session.startJoin();
+			return this.JOIN;
 		}
 	},
-	'END': {
-		'*': function() {
-			console.log('do nothing');
-		}
+	'JOIN': {
+
 	}
 });
 
diff --git a/package.json b/package.json
index 0dba337..9279861 100644
--- a/package.json
+++ b/package.json
@@ -18,6 +18,7 @@
   "homepage": "https://github.com/zqqiang/node-capwap#readme",
   "dependencies": {
     "packet": "0.0.6",
-    "stately.js": "fschaefer/Stately.js"
+    "stately.js": "fschaefer/Stately.js",
+    "underscore": "^1.8.3"
   }
 }
diff --git a/server/server.js b/server/server.js
index adefa97..445af0d 100755
--- a/server/server.js
+++ b/server/server.js
@@ -14,7 +14,7 @@ server.on('message', function(message, remote) {
 		var type = request.controlHeader.messageType;
 		if (1 == type) {
 			console.log('receive Discover Request');
-			var response = session.discoverRequestProcess(request);
+			var response = session.discoveryRequestProcess(request);
 			server.send(response, 0, response.length, enumType.socket.CLIENT_PORT, enumType.socket.CLIENT_IP /* error callback */ );
 			console.log('send Discover Response');
 		} else {
diff --git a/server/session.js b/server/session.js
index d554bf6..1884c1d 100755
--- a/server/session.js
+++ b/server/session.js
@@ -57,7 +57,7 @@ var buildVspWtpAllow = function(sn) {
 	return builder.buildTlv(serializer, 37, len);
 }
 
-exports.discoverRequestProcess = function(request) {
+exports.discoveryRequestProcess = function(request) {
 	var acDescriptor = buildAcDescriptor();
 	var acName = buildAcName();
 	var vspWtpAllow = buildVspWtpAllow(request.messageElement.wtpBoardData.wtpSerialNumber.value);
